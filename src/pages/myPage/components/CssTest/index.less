.cssWrap {
  height: 600px;
  padding: 20px;

  .mySelector {
    display: flex;

    /**
    * 当在父类内部写选择器的时候， 如果有多种子类，那么他们选中的顺序是按照父类的排序位置来的，而不是单独的子类在父类中的位置
    */

    /**偶数样式*/
    .mySelectorItemEven {
      width: 30px;
      margin: 20px;
      text-align: center;

      /** & 符号表示当前元素mySelectorItem */
      /** 当前元素（mySelectorItem） 在（mySelector）中的位置倒数第一位 此情况生效*/
      // &:nth-last-child(4) {
      //   background-color: green;
      // }

      /** 选择每个p元素是其父级的第一个p元素， 此情况生效*/
      // &:first-of-type {
      //   background-color: green;
      // }

      /** 选择每个p元素是其父级的最后一个p元素： 此情况不生效*/
      // &:last-of-type {
      //   background-color: green;
      // }

      /** 	选择每个p元素是其父级的唯一p元素 此情况不生效*/
      // &:only-of-type {
      //   background-color: green;
      // }

      /** 选择每个p元素是其父级的唯一子元素 此情况不生效*/
      // &:only-child {
      //   background-color: green;
      // }

      /** 选择每个p元素是其父级的第四个子元素 此情况生效， 但是如果选择的是奇数个数
      比如第三个，此时由于在父类中，第三个是其他子类，那么不生效了*/
      // &:nth-child(3) {
      //   background-color: green;
      // }
      &:nth-of-type(3) {
        background-color: green;
      }
    }

    /**奇数样式*/
    .mySelectorItemOdd {
      width: 30px;
      margin: 20px;
      text-align: center;

      /** 此情况生效*/
      //  &:nth-last-child(1) {
      //   background-color: red;
      // }

      /** 此情况不生效*/
      // &:first-of-type {
      //   background-color: red;
      // }

      /** 此情况生效*/
      // &:last-of-type {
      //   background-color: red;
      // }

      /** 此情况不生效*/
      // &:only-child {
      //   background-color: red;
      // }

      /** 此情况生效*/
      // &:nth-child(2) {
      //   background-color: red;
      // }
    }
  }

  .myTransfrom {
    width: 100px;
    height: 100px;
    margin-bottom: 50px;
    background-color: yellow;
    transform: rotate(45deg); // transform会导致子元素的fixed失效

    .myFixed {
      position: fixed;
      top: 50%;
      left: 50%;
      width: 50px;
      height: 50px;
      background-color: red;
    }
  }

  .top {
    width: 240px;
    height: 60px;
    background-color: #dddddd;
    transform: skew(-45deg, 0deg) translate(30px, 0px);
  }

  .center {
    float: left;
    width: 240px;
    height: 240px;
    background-color: #aaaaaa;
  }

  .right {
    float: left;
    width: 60px;
    height: 240px;
    background-color: #888888;
    transform: skew(0deg, -45deg) translate(0px, -30px);
  }

  /** less循环 */
  //当前主流的设备尺寸
  @deviceList: 750px, 720px, 640px, 540px, 480px, 424px, 414px, 400px, 384px, 375px, 320px;

  //设计稿的尺寸
  @psdWidth: 750px;

  //预设的基准值
  @baseFontSize: 100px;

  //设置数组的长度
  @len:length (@deviceList);

  .loopDomP(@index) when (@index > 0) {
    // 根据index获取对应的某个值 extract(数组名, 对应的序号)
    @media (max-width: extract(@deviceList, @index)) {
      .lessLoop {
        font-size: extract(@deviceList, @index) / @psdWidth* @baseFontSize;
        background-color: red;
      }
    }
    .loopDomP(@index - 1);
  }

  .loopDomP(@len);

  //   @media (min-width: extract(@deviceList, 1)) {
  //     .lessLoop {
  //       font-size: extract(@deviceList, 1) / @psdWidth* @baseFontSize;
  //       background-color: red;
  //     }
  //   }

  .beforeAfter {
    &::before {
      margin-right: 20px;
      background-color: red;
      content: 'before';
    }
    &::after {
      margin-left: 20px;
      background-color: green;
      content: 'after';
    }
  }

  /**动画效果和旋转 */
  .animationStyle {
    width: 300px;
    height: 300px;
    background-image: url(https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic.90sjimg.com%2Foriginal_origin_pic%2F18%2F09%2F01%2Fc92e66e3eb4ed76b813b3d00adc98334.png&refer=http%3A%2F%2Fpic.90sjimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1644232055&t=54bc99c30b88132bb8a8d3bae985ae0e);
    background-repeat: no-repeat;
    background-size: 300px 300px;
    border-radius: 50%;
    animation-name: myfirst; /* 动画名字，和@keyframes对应 */
    animation-duration: 10s; /* 动画执行时长 */
    animation-timing-function: linear; /* 动画执行的速度，linear表示匀速 */
    animation-iteration-count: infinite; /* 动画运行的次数，infinite表示一直运行 */
    animation-direction: normal; /* 动画执行的顺序，默认是normal，正常播放（向前播放） */

    @keyframes myfirst {
      0% {
        -ms-transform: rotate(0deg);
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg); /* IE 9 */ /* Safari and Chrome */
      }

      100% {
        -ms-transform: rotate(360deg);
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg); /* IE 9 */ /* Safari and Chrome */
      }
    }
  }

  .textTwinkle {
    margin: 3px 0 0 50px;
    animation-name: textTwinkle; /* 动画名字，和@keyframes对应 */
    animation-duration: 0.8s; /* 动画执行时长 */
    animation-timing-function: linear; /* 动画执行的速度，linear表示匀速 */
    animation-iteration-count: infinite; /* 动画运行的次数，infinite表示一直运行 */
    animation-direction: normal; /* 动画执行的顺序，默认是normal，正常播放（向前播放） */

    @keyframes textTwinkle {
      0% {
        opacity: 1;
      }
      100% {
        opacity: 0;
      }
    }
  }
}
